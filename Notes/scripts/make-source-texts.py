#!/usr/bin/env python3
import os
import os.path
from collections import defaultdict

from lxml import etree
from lxml.builder import ElementMaker


def main(args):
    """Copy text from xml comments into tags."""
    translations_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))

    for dirpath, dirnames, filenames in os.walk(translations_root):
        if "/." in dirpath:
            continue  # skip hidden directories
        for file_name in filenames:
            if not file_name.endswith(".xml"):
                continue
            file_path = os.path.join(dirpath, file_name)
            transform_file(file_path)


def transform_file(file_path):
    print("Transforming file ", file_path)
    with open(file_path, "rb") as inf:
        parser = etree.XMLParser(recover=True)
        doc = etree.parse(inf, parser)

    stuff_adjectives = STUFF_ADJECTIVES[file_path]

    # Replace tag text with last comment text
    last_comment = None
    for el in list(doc.iter()):
        text = (el.text or "").strip()

        if isinstance(el, etree._Comment) and text.startswith("EN:"):
            text = el.text[len("EN:") + 1 :]
            # Strip whitespace only around single-line texts
            if not text.startswith("\n"):
                text = text.strip()
            last_comment = text
        else:
            if last_comment is not None:
                el.text = last_comment
                if el.tag in [
                    "MessageModNeedsWellFormattedTargetVersion",
                    "MessageModNeedsWellFormattedPackageId",
                ]:
                    # These texts contain XML examples that are more readable
                    # without escaping "<" and ">"
                    el.text = etree.CDATA(el.text)
                # If the text contains any tags, we want them to be replaced by
                # the new text tags, so the element children must be removed.
                for _el in list(el.iterdescendants()):
                    _el.getparent().remove(_el)

                insert_staff_adjective(el, stuff_adjectives)

            last_comment = None

    with open(file_path, "wb") as outf:
        doc_content = b'\xEF\xBB\xBF<?xml version="1.0" encoding="UTF-8"?>\n'
        doc_content += etree.tostring(doc, encoding="UTF-8")
        # "<" and ">" is technically a reserved character and should be escaped when
        # included into XML text. We are undoing LXML's escaping in order to
        # keep the original text appearance for better readability.
        known_tags = [b"li", b"rulesStrings", b"Name"]
        for tagName in known_tags:
            doc_content = doc_content.replace(
                b"&lt;" + tagName + b"&gt;", b"<" + tagName + b">"
            )
            doc_content = doc_content.replace(
                b"&lt;/" + tagName + b"&gt;", b"</" + tagName + b">"
            )
        # Rules expressions. "<=" breaks the game's XML parser, so it is not
        # replaced here.
        doc_content = doc_content.replace(b"-&gt;", b"->")
        doc_content = doc_content.replace(b"&gt;=", b">=")

        outf.write(doc_content)


def insert_staff_adjective(el: etree.Element, stuff_adjectives: set):
    if "." not in el.tag:
        return
    name, suffix = el.tag.rsplit(".", 1)
    if suffix == "label" and name in stuff_adjectives:
        adj_tag = f"{name}.stuffProps.stuffAdjective"
        adj_el = el.getparent().find(adj_tag)
        if not adj_el:
            # create new element
            adj_el = etree.Element(adj_tag)
            adj_el.text = el.text
            tail = el.tail
            el.addnext(adj_el)
            el.tail = tail
        else:
            # update existing element
            adj_el.text = el.text

# Resources names are included in items names when the item is made out of the
# resource. The items names are formed using the <ThingMadeOfStuffLabel/>
# template from Keyed/Misc.xml. The game's translation cleanup tool will not
# add stuffProps.stuffAdjective elements automatically to the xml files. The
# resources that do need separate stuffProps.stuffAdjective strings are listed
# below. Existing stuffAdjective list was generated by running the following
# command: `grep -o -r "[a-zA-Z_]*\\.stuffProps\\.stuffAdjective" .`
_EXISTING_STUFF_ADJECTIVES = """\
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Fox_Arctic_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Fox_Arctic_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Fox_Fennec_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Fox_Fennec_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Fox_Red_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Fox_Red_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Wolf_Arctic_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Wolf_Arctic_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Wolf_Timber_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_WildCanines.xml:Wolf_Timber_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Bear.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Bear.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Bird.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Bird.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Bluefur.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Bluefur.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Camel.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Camel.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Chinchilla.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Chinchilla.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Dog.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Dog.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Elephant.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Elephant.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Fox.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Fox.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Heavy.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Heavy.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Human.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Human.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Light.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Light.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Lizard.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Lizard.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Panthera.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Panthera.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Patch.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Patch.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Pig.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Pig.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Plain.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Plain.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Rhinoceros.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Rhinoceros.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Thrumbo.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Thrumbo.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Wolf.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff_Leather.xml:Leather_Wolf.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_Temperate.xml:WildBoar_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_Temperate.xml:WildBoar_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_Bears.xml:Bear_Grizzly_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_Bears.xml:Bear_Grizzly_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_Bears.xml:Bear_Polar_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Races_Animal_Bears.xml:Bear_Polar_Leather.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Cloth.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Cloth.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:DevilstrandCloth.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:DevilstrandCloth.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Gold.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Gold.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Hyperweave.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Hyperweave.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Jade.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Jade.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Plasteel.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Plasteel.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Silver.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Silver.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Steel.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Steel.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Synthread.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Synthread.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Uranium.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:Uranium.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoodLog.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoodLog.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolAlpaca.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolAlpaca.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolMegasloth.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolMegasloth.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolMuffalo.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolMuffalo.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolSheep.stuffProps.stuffAdjective
./DefInjected/ThingDef/Items_Resource_Stuff.xml:WoolSheep.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksGranite.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksGranite.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksLimestone.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksLimestone.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksMarble.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksMarble.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksSandstone.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksSandstone.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksSlate.stuffProps.stuffAdjective
./DefInjected/ThingDef/Various_Stone.xml:BlocksSlate.stuffProps.stuffAdjective
"""
STUFF_ADJECTIVES = defaultdict(set)
for line in _EXISTING_STUFF_ADJECTIVES.split("\n"):
    line = line.strip()
    if not line:
        continue
    file_path, tag_name = line.split(":", 1)
    ending = ".stuffProps.stuffAdjective"
    if tag_name.endswith(ending):
        resource = tag_name[: -len(ending)]
        STUFF_ADJECTIVES[file_path].add(resource)

if __name__ == "__main__":
    import sys

    main(sys.argv[1:])
