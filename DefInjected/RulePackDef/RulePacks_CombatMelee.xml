<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  
  <!-- EN: r_logentry(p=0.5)->[INITIATOR_definite] [damaged_past] [atMaybe] [RECIPIENT_definite] in the [recipient_part0_label] [deflected_result]. -->
  <Combat_Deflect.rulePack.rulesStrings.0>r_logentry(p=1)->[INITIATOR_definite] [damaged_past] [at] [RECIPIENT_definite] in the [recipient_part0_label] [deflected_result].</Combat_Deflect.rulePack.rulesStrings.0>
  <!-- EN: r_logentry(p=0.3)->[INITIATOR_definite] [skillAdvMaybe] [damaged_past] [atMaybe] [RECIPIENT_definite] with [implement] [deflected_result]. -->
  <Combat_Deflect.rulePack.rulesStrings.1>r_logentry(p=0.3)->[INITIATOR_definite], wielding [INITIATOR_possessive] [WEAPON_label] [expertly], [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [deflected_result].</Combat_Deflect.rulePack.rulesStrings.1>
  <!-- EN: r_logentry(p=0.3)->[INITIATOR_definite] [skillAdvMaybe] [damaged_past] [atMaybe] [RECIPIENT_definite] [deflected_result]. -->
  <Combat_Deflect.rulePack.rulesStrings.2>r_logentry(p=0.3)->[INITIATOR_definite] hit [RECIPIENT_definite] with a [damaged_inf] from [implement] [deflected_result].</Combat_Deflect.rulePack.rulesStrings.2>
  <!-- EN: r_logentry(p=0.1)->[INITIATOR_definite], [skillDescMelee], [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [deflected_result]. -->
  <Combat_Deflect.rulePack.rulesStrings.3>r_logentry(p=0.3)->[INITIATOR_definite] used [implement] to [damaged_inf] [RECIPIENT_definite] [deflected_result].</Combat_Deflect.rulePack.rulesStrings.3>
  <!-- EN: r_logentry(p=0.1)->[INITIATOR_definite] hit [RECIPIENT_definite] with a [damaged_inf] from [implement] [deflected_result]. -->
  <Combat_Deflect.rulePack.rulesStrings.4>r_logentry(p=0.6)->[INITIATOR_definite] [damaged_past] [at] [RECIPIENT_definite] with [implement] [deflected_result].</Combat_Deflect.rulePack.rulesStrings.4>
  <!-- EN: r_logentry(p=0.1)->[INITIATOR_definite] [skillAdvMaybe] used [implement] to [damaged_inf] [RECIPIENT_definite] [deflected_result]. -->
  <Combat_Deflect.rulePack.rulesStrings.5>r_logentry(p=0.6)->[INITIATOR_definite] [damaged_past] [at] [RECIPIENT_definite] [deflected_result].</Combat_Deflect.rulePack.rulesStrings.5>
  <!-- EN: skillAdvMaybe-> -->
  <Combat_Deflect.rulePack.rulesStrings.6>at-></Combat_Deflect.rulePack.rulesStrings.6>
  <!-- EN: skillAdvMaybe->[skillAdv] -->
  <Combat_Deflect.rulePack.rulesStrings.7>at->at</Combat_Deflect.rulePack.rulesStrings.7>
  <!-- EN: atMaybe-> -->
  <Combat_Deflect.rulePack.rulesStrings.8>deflected_result-> [adverb_deflected]</Combat_Deflect.rulePack.rulesStrings.8>
  <!-- EN: atMaybe->at -->
  <Combat_Deflect.rulePack.rulesStrings.9>deflected_result->, [deflected_consequence]</Combat_Deflect.rulePack.rulesStrings.9>
  <!-- EN: deflected_result->, but the [TOOL_label] [deflected] off [harmlessly_opt] -->
  <Combat_Deflect.rulePack.rulesStrings.10>adverb_deflected_opt(p=4)-></Combat_Deflect.rulePack.rulesStrings.10>
  <!-- EN: deflected_result->, [deflecting] off [RECIPIENT_possessive] armor [harmlessly_opt] -->
  <Combat_Deflect.rulePack.rulesStrings.11>adverb_deflected_opt->[adverb_deflected]</Combat_Deflect.rulePack.rulesStrings.11>
  <!-- EN: harmlessly_opt(p=4)-> -->
  <Combat_Deflect.rulePack.rulesStrings.12>adverb_deflected->harmlessly</Combat_Deflect.rulePack.rulesStrings.12>
  <!-- EN: harmlessly_opt->[harmlessly] -->
  <Combat_Deflect.rulePack.rulesStrings.13>adverb_deflected->uselessly</Combat_Deflect.rulePack.rulesStrings.13>
  <!-- EN: harmlessly->harmlessly -->
  <Combat_Deflect.rulePack.rulesStrings.14>deflected_consequence->but the [TOOL_label] [scraped_past] off [adverb_deflected_opt]</Combat_Deflect.rulePack.rulesStrings.14>
  <!-- EN: harmlessly->uselessly -->
  <Combat_Deflect.rulePack.rulesStrings.15>deflected_consequence->[scraped_present] off [RECIPIENT_possessive] armor [adverb_deflected_opt]</Combat_Deflect.rulePack.rulesStrings.15>
  <!-- EN: deflected->deflected -->
  <Combat_Deflect.rulePack.rulesStrings.16>scraped_present->scraping</Combat_Deflect.rulePack.rulesStrings.16>
  <!-- EN: deflected->scraped -->
  <Combat_Deflect.rulePack.rulesStrings.17>scraped_present->sliding</Combat_Deflect.rulePack.rulesStrings.17>
  <!-- EN: deflected->slid -->
  <Combat_Deflect.rulePack.rulesStrings.18>scraped_past->scraped</Combat_Deflect.rulePack.rulesStrings.18>
  <!-- EN: deflected->grazed -->
  <Combat_Deflect.rulePack.rulesStrings.19>scraped_past->slid</Combat_Deflect.rulePack.rulesStrings.19>
  <!-- EN: deflected->bounced -->
  <Combat_Deflect.rulePack.rulesStrings.20>TODO</Combat_Deflect.rulePack.rulesStrings.20>
  <!-- EN: deflected->glanced -->
  <Combat_Deflect.rulePack.rulesStrings.21>TODO</Combat_Deflect.rulePack.rulesStrings.21>
  <!-- EN: deflecting->deflecting -->
  <Combat_Deflect.rulePack.rulesStrings.22>TODO</Combat_Deflect.rulePack.rulesStrings.22>
  <!-- EN: deflecting->scraping -->
  <Combat_Deflect.rulePack.rulesStrings.23>TODO</Combat_Deflect.rulePack.rulesStrings.23>
  <!-- EN: deflecting->sliding -->
  <Combat_Deflect.rulePack.rulesStrings.24>TODO</Combat_Deflect.rulePack.rulesStrings.24>
  <!-- EN: deflecting->grazing -->
  <Combat_Deflect.rulePack.rulesStrings.25>TODO</Combat_Deflect.rulePack.rulesStrings.25>
  <!-- EN: deflecting->bouncing -->
  <Combat_Deflect.rulePack.rulesStrings.26>TODO</Combat_Deflect.rulePack.rulesStrings.26>
  <!-- EN: deflecting->glancing -->
  <Combat_Deflect.rulePack.rulesStrings.27>TODO</Combat_Deflect.rulePack.rulesStrings.27>
  
  <!-- EN: r_logentry(p=0.5)->[RECIPIENT_definite] [skillAdvMaybe] dodged [INITIATOR_definite]'s [damaged_inf] from [implement]. -->
  <Combat_Dodge.rulePack.rulesStrings.0>r_logentry(p=0.2)->[RECIPIENT_definite] dodged [INITIATOR_definite]'s [damaged_inf] from [implement].</Combat_Dodge.rulePack.rulesStrings.0>
  <!-- EN: r_logentry(p=0.5)->[RECIPIENT_definite] [skillAdvMaybe] dodged [INITIATOR_definite]'s [damaged_inf]. -->
  <Combat_Dodge.rulePack.rulesStrings.1>r_logentry(p=0.2)->[RECIPIENT_definite] dodged [INITIATOR_definite]'s [damaged_inf].</Combat_Dodge.rulePack.rulesStrings.1>
  <!-- EN: skillAdvMaybe-> -->
  <Combat_Dodge.rulePack.rulesStrings.2>result->but [RECIPIENT_definite] leapt out of the way</Combat_Dodge.rulePack.rulesStrings.2>
  <!-- EN: skillAdvMaybe->[skillAdv] -->
  <Combat_Dodge.rulePack.rulesStrings.3>result->but was deceived by [RECIPIENT_definite]'s feint</Combat_Dodge.rulePack.rulesStrings.3>
  <!-- EN: result->but [RECIPIENT_definite] leapt out of the way -->
  <Combat_Dodge.rulePack.rulesStrings.4>result->but the attack was cleverly avoided</Combat_Dodge.rulePack.rulesStrings.4>
  <!-- EN: result->but was deceived by [RECIPIENT_definite]'s feint -->
  <Combat_Dodge.rulePack.rulesStrings.5>TODO</Combat_Dodge.rulePack.rulesStrings.5>
  <!-- EN: result->but the attack was cleverly avoided -->
  <Combat_Dodge.rulePack.rulesStrings.6>TODO</Combat_Dodge.rulePack.rulesStrings.6>
  
  <!-- EN: r_logentry(p=1.0)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label]. -->
  <Combat_Hit.rulePack.rulesStrings.0>r_logentry(p=0.3)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label].</Combat_Hit.rulePack.rulesStrings.0>
  <!-- EN: r_logentry(p=0.4)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [strikeAdv]. -->
  <Combat_Hit.rulePack.rulesStrings.1>r_logentry(p=0.1)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [adverb_flavortext].</Combat_Hit.rulePack.rulesStrings.1>
  <!-- EN: r_logentry(p=0.4)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label], [flavortext_consequence]. -->
  <Combat_Hit.rulePack.rulesStrings.2>r_logentry(p=0.1)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label] [flavortext_situation].</Combat_Hit.rulePack.rulesStrings.2>
  <!-- EN: r_logentry(p=0.4)->[INITIATOR_definite], [skillDescMelee], [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label]. -->
  <Combat_Hit.rulePack.rulesStrings.3>r_logentry(p=0.1)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label], [flavortext_consequence].</Combat_Hit.rulePack.rulesStrings.3>
  <!-- EN: r_logentry(p=0.2)->[INITIATOR_definite], [skillDescMelee], [strikeAdv] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label]. -->
  <Combat_Hit.rulePack.rulesStrings.4>r_logentry(p=0.07)->[INITIATOR_definite], wielding [INITIATOR_possessive] [WEAPON_label] [expertly], [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label].</Combat_Hit.rulePack.rulesStrings.4>
  <!-- EN: r_logentry(p=0.4)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets]. -->
  <Combat_Hit.rulePack.rulesStrings.5>r_logentry(p=0.03)->[INITIATOR_definite], wielding [INITIATOR_possessive] [WEAPON_label] [expertly], [adverb_flavortext] [damaged_past] [RECIPIENT_definite] in the [recipient_part0_label].</Combat_Hit.rulePack.rulesStrings.5>
  <!-- EN: r_logentry(p=0.4)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] [destroyed_suffix]. -->
  <Combat_Hit.rulePack.rulesStrings.6>r_logentry(p=0.3)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets].</Combat_Hit.rulePack.rulesStrings.6>
  <!-- EN: r_logentry(p=0.4)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] with [implement]. -->
  <Combat_Hit.rulePack.rulesStrings.7>r_logentry(p=0.3)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] [destroyed_suffix].</Combat_Hit.rulePack.rulesStrings.7>
  <!-- EN: r_logentry(p=1,recipient_part_count==0)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] with [implement]. -->
  <Combat_Hit.rulePack.rulesStrings.8>r_logentry(p=0.3)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] [expertly].</Combat_Hit.rulePack.rulesStrings.8>
  <!-- EN: r_logentry(p=0.4,recipient_part_count==0)->[INITIATOR_definite] [skillAdv] [damaged_past] [RECIPIENT_definite] with [implement]. -->
  <Combat_Hit.rulePack.rulesStrings.9>r_logentry(p=0.3)->[INITIATOR_definite] [destroyed_past] [RECIPIENT_definite]'s [destroyed_targets] with [implement].</Combat_Hit.rulePack.rulesStrings.9>
  <!-- EN: result(p=1,recipient_part_damaged_count==0)->[destroyed_present] [RECIPIENT_possessive] [destroyed_targets] -->
  <Combat_Hit.rulePack.rulesStrings.10>result(p=1,recipient_part_damaged_count==0)->[destroyed_present] [RECIPIENT_possessive] [destroyed_targets]</Combat_Hit.rulePack.rulesStrings.10>
  <!-- EN: result(p=1,recipient_part_destroyed_count==0)->[damaged_present] [RECIPIENT_possessive] [damaged_targets] -->
  <Combat_Hit.rulePack.rulesStrings.11>result(p=1,recipient_part_destroyed_count==0)->[damaged_present] [RECIPIENT_possessive] [damaged_targets]</Combat_Hit.rulePack.rulesStrings.11>
  <!-- EN: result(p=1)->[destroyed_present] [RECIPIENT_possessive] [destroyed_targets] and [damaged_present] [RECIPIENT_possessive] [damaged_targets] -->
  <Combat_Hit.rulePack.rulesStrings.12>result(p=1)->[destroyed_present] [RECIPIENT_possessive] [destroyed_targets] and [damaged_present] [RECIPIENT_possessive] [damaged_targets]</Combat_Hit.rulePack.rulesStrings.12>
  <!-- EN: action(p=1.0)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] with [implement] -->
  <Combat_Hit.rulePack.rulesStrings.13>action(p=0.3)->[INITIATOR_definite] hit [RECIPIENT_definite] with a [damaged_inf] from [implement]</Combat_Hit.rulePack.rulesStrings.13>
  <!-- EN: action(p=0.3)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] -->
  <Combat_Hit.rulePack.rulesStrings.14>action(p=0.3)->[INITIATOR_definite] used [implement] to [damaged_inf] [RECIPIENT_definite]</Combat_Hit.rulePack.rulesStrings.14>
  <!-- EN: action(p=0.3)->[INITIATOR_definite], [skillDescMelee], [damaged_past] [RECIPIENT_definite] -->
  <Combat_Hit.rulePack.rulesStrings.15>action->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite] with [implement]</Combat_Hit.rulePack.rulesStrings.15>
  <!-- EN: action(p=0.3)->[INITIATOR_definite] hit [RECIPIENT_definite] with a [damaged_inf] from [implement] -->
  <Combat_Hit.rulePack.rulesStrings.16>action(p=0.6)->[INITIATOR_definite] [damaged_past] [RECIPIENT_definite]</Combat_Hit.rulePack.rulesStrings.16>
  <!-- EN: action(p=0.3)->[INITIATOR_definite], [skillDescMelee], hit [RECIPIENT_definite] with a [damaged_inf] from [implement] -->
  <Combat_Hit.rulePack.rulesStrings.17>TODO</Combat_Hit.rulePack.rulesStrings.17>
  <!-- EN: action(p=0.3)->[INITIATOR_definite] used [implement] to [damaged_inf] [RECIPIENT_definite] -->
  <Combat_Hit.rulePack.rulesStrings.18>TODO</Combat_Hit.rulePack.rulesStrings.18>
  <!-- EN: action(p=0.3)->[INITIATOR_definite] used [implement] [skillAdv] to [damaged_inf] [RECIPIENT_definite] -->
  <Combat_Hit.rulePack.rulesStrings.19>TODO</Combat_Hit.rulePack.rulesStrings.19>
  
  <!-- EN: r_logentry(p=0.3)->[RECIPIENT_definite] avoided [INITIATOR_definite]'s [WEAPON_label] [damaged_inf]. -->
  <Combat_Miss.rulePack.rulesStrings.0>r_logentry(p=0.2)->[RECIPIENT_definite] avoided [INITIATOR_definite]'s [WEAPON_label] [damaged_inf].</Combat_Miss.rulePack.rulesStrings.0>
  <!-- EN: r_logentry(p=0.3)->[INITIATOR_definite] missed [RECIPIENT_definite] with a [damaged_inf] from [implement]. -->
  <Combat_Miss.rulePack.rulesStrings.1>r_logentry(p=0.2)->[INITIATOR_definite] missed [RECIPIENT_definite] with a [damaged_inf] from [implement].</Combat_Miss.rulePack.rulesStrings.1>
  <!-- EN: r_logentry(p=0.3)->[INITIATOR_definite] [failtype] while trying to [damaged_inf] [RECIPIENT_definite] with [implement]. -->
  <Combat_Miss.rulePack.rulesStrings.2>r_logentry(p=0.2)->[INITIATOR_definite] [failtype] while trying to [damaged_inf] [RECIPIENT_definite] with [implement].</Combat_Miss.rulePack.rulesStrings.2>
  <!-- EN: r_logentry(p=0.3)->[INITIATOR_definite] [failtype] while trying to [damaged_inf] [RECIPIENT_definite]. -->
  <Combat_Miss.rulePack.rulesStrings.3>r_logentry(p=0.2)->[INITIATOR_definite] [failtype] while trying to [damaged_inf] [RECIPIENT_definite].</Combat_Miss.rulePack.rulesStrings.3>
  <!-- EN: r_logentry(p=0.3)->[INITIATOR_definite] tried [skillAdvMaybe] to [damaged_inf] [RECIPIENT_definite], but [failtype]. -->
  <Combat_Miss.rulePack.rulesStrings.4>r_logentry(p=0.2)->[INITIATOR_definite] [failtype].</Combat_Miss.rulePack.rulesStrings.4>
  <!-- EN: skillAdvMaybe-> -->
  <Combat_Miss.rulePack.rulesStrings.5>failtype->stumbled</Combat_Miss.rulePack.rulesStrings.5>
  <!-- EN: skillAdvMaybe->[skillAdv] -->
  <Combat_Miss.rulePack.rulesStrings.6>failtype->tripped</Combat_Miss.rulePack.rulesStrings.6>
  <!-- EN: failtype(p=5)->missed -->
  <Combat_Miss.rulePack.rulesStrings.7>failtype->flailed</Combat_Miss.rulePack.rulesStrings.7>
  <!-- EN: failtype->stumbled -->
  <Combat_Miss.rulePack.rulesStrings.8>failtype->floundered</Combat_Miss.rulePack.rulesStrings.8>
  <!-- EN: failtype->tripped -->
  <Combat_Miss.rulePack.rulesStrings.9>failtype->missed</Combat_Miss.rulePack.rulesStrings.9>
  <!-- EN: failtype->flailed -->
  <Combat_Miss.rulePack.rulesStrings.10>result->but missed</Combat_Miss.rulePack.rulesStrings.10>
  <!-- EN: failtype->floundered -->
  <Combat_Miss.rulePack.rulesStrings.11>result->but hit only air</Combat_Miss.rulePack.rulesStrings.11>
  <!-- EN: result(p=4)->but missed -->
  <Combat_Miss.rulePack.rulesStrings.12>result->but the swing went wide</Combat_Miss.rulePack.rulesStrings.12>
  <!-- EN: result->but hit only air -->
  <Combat_Miss.rulePack.rulesStrings.13>result->but stumbled at the last second</Combat_Miss.rulePack.rulesStrings.13>
  <!-- EN: result->but the swing went wide -->
  <Combat_Miss.rulePack.rulesStrings.14>result(initiator_flesh!=Mechanoid)->but hesitated at the last second</Combat_Miss.rulePack.rulesStrings.14>
  <!-- EN: result->but stumbled at the last second -->
  <Combat_Miss.rulePack.rulesStrings.15>TODO</Combat_Miss.rulePack.rulesStrings.15>
  <!-- EN: result(initiator_flesh!=Mechanoid)->but hesitated at the last second -->
  <Combat_Miss.rulePack.rulesStrings.16>TODO</Combat_Miss.rulePack.rulesStrings.16>
  
</LanguageData>